import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";

import { api } from "@/utils/api";
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faCheck, faTrash, faPlus, faRotate, faPenToSquare } from '@fortawesome/free-solid-svg-icons'
import type { Word } from "@prisma/client";

export default function Home() {
  return (
    <>
      <Head>
        <title>Vocabulearn</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Body />
    </>
  );
}

function Body() {
  const { data: sessionData } = useSession();

  return (
    <main className=" flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
      <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
        { sessionData ? <UserGreeting /> : <GuestGreeting /> }
      </div>
    </main>
  )
}

function UserGreeting() {
  const { data: userWords, refetch: refetchUserWords } = api.word.getUserWords.useQuery(undefined, {
    enabled: true
  });

  const { mutate: addWord, isLoading: isAddingWord } = api.word.create.useMutation();

  const handleOnAddClick = ({ name, definition }: { name: string, definition: string }) => {
    console.log('handleOnAddClick')
    console.log(name, definition)
    if (isAddingWord) return;
    if (!name || !definition) return;

    addWord({ name, definition });
    void refetchUserWords();
  }

  return (
    <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
      <RandomWordGenerator handleOnAddClick={() => handleOnAddClick} />
      <div className="flex flex-col items-center gap-2">
        { userWords?.length && userWords.map((userWord: Word) => (
          <WordCard
            key={userWord.id as number}
            value={{ word: userWord.name, definition: userWord.definition }}
            saved={true}
          />
        ))}
      </div>
      <SignOutButton />
    </div>
  )
}

function GuestGreeting() {
  return (
    <>
      <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
        Vocabulearn
      </h1>
      <div className="flex flex-col items-center gap-2">
        <SignInButton />
      </div>
    </>
  )
}

function SignInButton() {
  return (
    <button
      className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
      onClick={() => void signIn()}
    >
      Sign in
    </button>
  );
}

function SignOutButton() {
  return (
    <button
      className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
      onClick={() => void signOut()}
    >
      Sign out
    </button>
  );
}

function RandomWordGenerator({ handleOnAddClick }: { handleOnAddClick: () => any}) {
  const { data: randomWord = { word: '', definition: '' }, refetch: generateRandomWord } = api.word.getRandomWord.useQuery(undefined, {
    enabled: false
  });

  return (
    <>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={() => generateRandomWord()}
      >
        Show random word
      </button>
      { randomWord.definition &&
        <WordCard
          value={randomWord}
          saved={false}
          onAddClick={handleOnAddClick({ name: randomWord.word, definition: randomWord.definition })}
          onRefreshClick={() => generateRandomWord()}
        />
      }
    </>
  )
}

function WordCard({ value: { word, definition }, saved, onRefreshClick, onAddClick }: { value: { word: string | undefined, definition: string | undefined }, saved: boolean, onRefreshClick?: () => void, onAddClick?: () => void }) {
  const Actions = () => {
    if (saved) {
      return (
        <div className="border-l-2 flex flex-col">
          <FontAwesomeIcon icon={faCheck} className="p-2 cursor-pointer" />
          <FontAwesomeIcon icon={faPenToSquare} className="p-2 cursor-pointer" />
          <FontAwesomeIcon icon={faTrash} className="p-2 cursor-pointer" />
        </div>
      )
    } else {
      return (
        <div className="border-l-2 flex flex-col">
          <FontAwesomeIcon icon={faPlus} className="p-2 cursor-pointer" onClick={onAddClick} />
          <FontAwesomeIcon icon={faRotate} className="p-2 cursor-pointer" onClick={onRefreshClick} />
        </div>
      )
    }
  }

  return (
    <div className={saved ? "bg-fuchsia-100 rounded-xl shadow-lg flex" : "bg-white rounded-xl shadow-lg flex"}>
      <div className="p-8">
        <p className="text-2xl font-bold text-gray-800">{ word }</p>
        <p className="inline text-lg text-gray-500">{ definition }</p>
      </div>
      <Actions />
    </div>
  )
}
