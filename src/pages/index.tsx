import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";

import { api } from "@/utils/api";
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faCheck, faTrash, faPlus, faRotate, faPenToSquare } from '@fortawesome/free-solid-svg-icons'

export default function Home() {
  return (
    <>
      <Head>
        <title>Vocabulearn</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
        <script src="https://kit.fontawesome.com/a849c49912.js" crossorigin="anonymous"></script>
      </Head>
      <Body />
    </>
  );
}

function Body() {
  const { data: sessionData } = useSession();

  return (
    <main className=" flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
      <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
        { sessionData ? <RandomWordGenerator /> : <GuestGreeting /> }
      </div>
    </main>
  )
}

function GuestGreeting() {
  return (
    <>
      <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
        Vocabulearn
      </h1>
      <div className="flex flex-col items-center gap-2">
        <SingInButton />
      </div>
    </>
  )
}

function SingInButton() {
  return (
    <button
      className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
      onClick={() => void signIn()}
    >
      Sign in
    </button>
  );
}

function RandomWordGenerator() {
  // const [newWord, setNewWord] = useState<string>('');

  const { data: randomWord = { word: '', definition: '' }, refetch: generateRandomWord } = api.post.getRandomWord.useQuery(undefined, {
    enabled: false
  });

  // const { data: newDefinition = { word: '', definition: '' }, refetch: findDefinition } = api.post.findDefinition.useQuery({ word: newWord }, {
  //   enabled: true
  // });

  // const onClickDescriptionWord = (word: string) => {
  //   console.log('on click description word')
  //   setNewWord(word);
  //   void findDefinition();
  // }

  return (
    <>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={() => generateRandomWord()}
      >
        Show random word
      </button>
      { randomWord.definition &&
        <WordCard
          value={randomWord}
          onRefreshClick={() => generateRandomWord()}
        />
      }
    </>
  )
}

function WordCard({ value: { word, definition }, onRefreshClick }: { value: { word: string | undefined, definition: string | undefined }, onRefreshClick: () => void }) {
  return (
    <div className="bg-white rounded-xl shadow-lg flex">
      <div className="p-8">
        <p className="text-2xl font-bold text-gray-800">{ word }</p>
        <p className="inline text-lg text-gray-500">{ definition }</p>
      </div>
      <div className="border-l-2 flex flex-col">
        <FontAwesomeIcon icon={faPlus} className="p-2 cursor-pointer" />
        <FontAwesomeIcon icon={faRotate} className="p-2 cursor-pointer" onClick={onRefreshClick} />
      </div>
    </div>
  )
}
